# Innovation Marketplace Environment Variables
# Copy this file to .env and fill in your actual values

# ========================================
# APPLICATION SETTINGS
# ========================================
SECRET_KEY=your-secret-key-here
JWT_SECRET_KEY=your-jwt-secret-key-here
JWT_COOKIE_SECURE=false

# ========================================
# DATABASE SETTINGS
# ========================================

# Option 1: SQLite (for quick local testing)
# DATABASE_URL=sqlite:///moringa_marketplace.db

# Option 2: Google Cloud SQL PostgreSQL (for production)
# Requires Cloud SQL Proxy for local development
# DATABASE_URL=postgresql://username:password@/database_name?host=/cloudsql/PROJECT_ID:REGION:INSTANCE_NAME
# Example: postgresql://app_user:password@/innovation_marketplace?host=/cloudsql/projects-9edde:us-central1:innovation-marketplace-db

# Option 3: Neon PostgreSQL (easiest for development)
# DATABASE_URL=postgresql://username:password@host/database?sslmode=require&channel_binding=require
# Example: postgresql://neondb_owner:password@ep-quiet-poetry-ad42liu9-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require

# Option 4: Local PostgreSQL
# DATABASE_URL=postgresql://username:password@localhost:5432/database_name

# Set the active database URL (uncomment one of the above)
DATABASE_URL=sqlite:///moringa_marketplace.db
SQLALCHEMY_DATABASE_URI=sqlite:///moringa_marketplace.db

# ========================================
# FIREBASE/GOOGLE CLOUD CREDENTIALS
# ========================================
# Method 1: For local development (use file path)
FIREBASE_SERVICE_ACCOUNT_KEY=/path/to/your/service-account-key.json

# Method 2: For deployment (use JSON string)
# GOOGLE_CREDENTIALS_JSON={"type":"service_account","project_id":"your-project",...}

# Required for both methods
FIREBASE_PROJECT_ID=your-firebase-project-id
FIREBASE_STORAGE_BUCKET=your-firebase-project-id.firebasestorage.app

# ========================================
# CLOUDINARY SETTINGS
# ========================================
CLOUDINARY_CLOUD_NAME=your-cloudinary-cloud-name
CLOUDINARY_API_KEY=your-cloudinary-api-key
CLOUDINARY_API_SECRET=your-cloudinary-api-secret
CLOUDINARY_FOLDER=Innovation-Marketplace

# ========================================
# EMAIL SETTINGS (if needed)
# ========================================
# STUDENT_EMAIL_DOMAIN=@student.moringaschool.com

# ========================================
# DEPLOYMENT NOTES
# ========================================
# For local development:
#   1. Download service account JSON from Firebase Console
#   2. Set FIREBASE_SERVICE_ACCOUNT_KEY to the file path
#   3. Set FIREBASE_PROJECT_ID and FIREBASE_STORAGE_BUCKET
#
# For deployment (Heroku, Railway, etc.):
#   1. Use the credential_helper.py script to generate GOOGLE_CREDENTIALS_JSON
#   2. Set GOOGLE_CREDENTIALS_JSON as environment variable
#   3. Set FIREBASE_PROJECT_ID and FIREBASE_STORAGE_BUCKET
#
# Run the helper script:
#   python server/utils/credential_helper.py path/to/your/service-account.json

# ========================================
# GOOGLE CLOUD SQL PROXY SETUP (for local development)
# ========================================
# If using Google Cloud SQL (Option 2 above), you need to set up the Cloud SQL Proxy
# for local development. Follow these steps:
#
# 1. Install Google Cloud SDK:
#    curl https://sdk.cloud.google.com | bash
#    exec -l $SHELL
#    gcloud init
#
# 2. Authenticate with Google Cloud:
#    gcloud auth login
#    gcloud config set project YOUR_PROJECT_ID
#
# 3. Install Cloud SQL Proxy:
#    curl -o cloud_sql_proxy https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64
#    chmod +x cloud_sql_proxy
#    sudo mv cloud_sql_proxy /usr/local/bin/
#
# 4. Create socket directory:
#    sudo mkdir -p /cloudsql
#    sudo chmod 777 /cloudsql
#
# 5. Start the proxy (replace with your instance connection name):
#    nohup cloud_sql_proxy -dir=/cloudsql -instances=PROJECT_ID:REGION:INSTANCE_NAME > proxy.log 2>&1 &
#    Example: nohup cloud_sql_proxy -dir=/cloudsql -instances=projects-9edde:us-central1:innovation-marketplace-db > proxy.log 2>&1 &
#
# 6. Verify proxy is running:
#    ps aux | grep cloud_sql_proxy
#    ls -la /cloudsql/PROJECT_ID:REGION:INSTANCE_NAME/
#
# 7. Set your DATABASE_URL to use the socket:
#    DATABASE_URL=postgresql://username:password@/database_name?host=/cloudsql/PROJECT_ID:REGION:INSTANCE_NAME
#
# Note: The proxy must be running whenever you develop locally with Cloud SQL.
# For production deployment, the proxy is not needed - Cloud Run handles the connection automatically.
#
# Alternative: Use Neon PostgreSQL (Option 3) to avoid proxy complexity entirely.
